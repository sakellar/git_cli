Hi,

So regarding our newest feature Parlay Rest Handler we have a conversation with other colleagues for the technology we are going to use between container X and container Y.
So far X and Y communicates via REST which is not sufficient in terms of delay . I would propose  Google Remote Procedure Call instead.
The transport layer works using HTTP/2 on top of TCP/IP. It allows for lower latency (faster) connections that can take advantage of a single connection from client to server (which makes more efficient use of connection and can result in more efficient use of server resources.
HTTP/2 also supports bidirectional connectivity and asynchronous connectivity. So it is possible for the server to efficiently make contact with client to send messages (async response/notifications, etc..)
While, both REST and gRPC can generate client/server stubs (using something like swagger for REST), REST has a limited set of primary 'function' calls (or verbs):

Cons : Compatibility issues , need to upgrade libraries to use HTTP 2.
Pros : Protobuf combined with grpC., with protobuf you can generate code so we end up with less implementation.
Moreover, my tests have show double througput in terms of perfomance.

Finally, I believe that since our containers do not have interface with client, it is much easier adapt to this technology it is not changing an interface with client but an internal interface whcih makes it less risky to proceed with this implementation.

Wow, that GRPC endpoint is so much cleaner in my opinion. There is no messy input/response serialization baloney as grpc deals with the serialization. Moreover, there is actually a service description that generates all the InfoRequest/InfoReply structures for me.
It is pretty clear that a scheme change would cause many many touch points in the REST version of the code, whereas there are basically no refactoring touch points other than the service definition file.

